namespace :deploy do

  desc "Prepare installing GlusterFS"
  task :preparation do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "echo 'export PATH=$PATH:/bin:/usr/bin' >> ~/.bashrc" unless test "/bin/egrep '/bin' ~/.bashrc > /dev/null; exit $?"

      execute "sudo yum install -y wget git yum-priorities"
      %w[
        http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
        http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
        http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
      ].each do |uri|
        begin
          rpm = uri.gsub(/(#{uri.gsub(/[^\/]+$/, "")})/, "")
          execute "wget #{uri} && sudo rpm -Uvh #{rpm} ; rm -f #{rpm}*"
        rescue => ex
          execute "echo '#{Time.now}: #{__LINE__}: #{ex}' | tee -a #{@@install_log}"
        end
      end
      repo = "/etc/yum.repos.d/remi.repo"
      execute "sudo sed -i s/enabled=0/enabled=1/ #{repo}" if test("[ -f #{repo} ]")

      [
        { :name => "CentOS-Base", :priority => 5 },
        { :name => "CentOS-Media", :priority => 7 },
        { :name => "CentOS-Debuginfo", :priority => 6 },
        { :name => "CentOS-Vault", :priority => 9 },
        { :name => "rpmforge", :priority => 1 },
        { :name => "epel", :priority => 2 },
        { :name => "epel-testing", :priority => 10 },
        { :name => "remi", :priority => 3 },
      ].each do |repo|
        file = "/etc/yum.repos.d/" + repo[:name] + ".repo"
        if test("[ -f #{file} ]")
          next if test "egrep 'priority=[0-9]+' #{file} > /dev/null; exit $?"
          execute "sudo sed -i \"s/name\=/priority=#{repo[:priority]}\\nname\=/g\" #{file}"
        end
      end

    end
  end

  desc "Install GlusterFS dependancies"
  task :dependancies do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      targets = ""
      dependancies = %w[
        openssh-clients
        make
        rpm-build
        bison
        flex
        automake
        libtool
        ncurses-devel
        readline-devel
        openssl-devel
        libxml2-devel
        libibverbs-devel
        libacl-devel
        libattr-devel
        python-devel
        python-setuptools
        lvm2-devel
        systemtap-sdt-devel
        libaio-devel
        xfsprogs
      ]
      dependancies.each do |d| targets = targets + " " + d end
      execute "sudo yum install -y #{targets}"

      begin
        execute "sudo yum -y update --enablerepo=rpmforge-extras --skip-broken"
      rescue => ex
        execute "echo '#{Time.now}: #{__LINE__}: #{ex}' | tee -a #{@@install_log}"
      end

      %w[ rsync python-ctypes ].each do |rpm|
        begin
          execute "sudo yum -y install --enablerepo=rpmforge-extras #{rpm}"
        rescue => ex
          execute "echo '#{Time.now}: #{__LINE__}: #{ex}' | tee -a #{@@install_log}"
        end
      end

    end
  end

  desc "Compile GlusterFS"
  task :compile do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "cd #{@@dir}; sh ./autogen.sh"
      execute "cd #{@@dir}; sh ./configure \
        --prefix=#{@@install_path} \
        --enable-bd-xlator \
        --enable-fusermount \
        --enable-systemtap \
        --enable-debug"
      execute "cd #{@@dir}; make"
    end
  end

  desc "Install GlusterFS"
  task :make_install do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "cd #{@@dir}; sudo make install"
      symlink = "/usr/local/glusterfs"
      execute "sudo rm -f #{symlink}" if test("[ -L #{symlink} ]")
      execute "sudo ln -sf #{@@install_path} #{symlink}"
    end
  end

  desc "GlusterFS related configurations"
  task :configuration do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      [
        {
          :text => 'export PATH=$PATH:/usr/local/glusterfs/sbin',
          :target => '~/.bashrc',
        },
        {
          :text => 'export MANPATH=$MANPATH:/usr/local/glusterfs/share/man',
          :target => '~/.bashrc',
        },
        {
          :text => '/usr/local/glusterfs/lib',
          :target => '/etc/ld.so.conf.d/glusterfs.conf',
        },
      ].each do |e|
        begin
          execute "sudo touch #{e[:target]}" unless test("[ -f #{e[:target]} ]")
          ret = test "sudo grep '#{e[:text]}' #{e[:target]} > /dev/null; exit $?"
          execute "echo '#{e[:text]}' | sudo tee -a #{e[:target]}" unless ret
        rescue => ex
          execute "echo '#{Time.now}: #{__LINE__}: #{ex}' | tee -a #{@@install_log}"
        end
      end

      begin
        execute "sudo /sbin/ldconfig"
        execute "sudo sed -i 's/SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config"
        execute "sudo /sbin/chkconfig iptables off"
        execute "sudo /sbin/service iptables stop"
        execute "sudo /sbin/chkconfig --add glusterd" unless test "sudo chkconfig --list | grep gluster > /dev/null; exit $?"
      rescue => ex
        execute "echo '#{Time.now}: #{__LINE__}: #{ex}' | tee -a #{@@install_log}"
      end

    end
  end

  desc "Start GlusterFS"
  task :start_glusterfs do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "sudo /sbin/service glusterd start"
    end
  end

  desc "Stop GlusterFS"
  task :stop_glusterfs do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "sudo /sbin/service glusterd stop"
    end
  end

  desc "Restart GlusterFS"
  task :restart_glusterfs do
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "sudo /sbin/service glusterd restart"
    end
  end

  desc "Starting installation"
  task :glusterfs do
    @@dir = fetch(:deploy_to) + "/current"
    @@install_path = "/usr/local/glusterfs-current"
    @@install_log = "~/capistrano-glusterfs.log"
    on roles(:glusterfs), in: :sequence, wait: 5 do
      execute "echo | tee #{@@install_log}"
    end

    # invoke "deploy:preparation"
    # invoke "deploy:dependancies"
    invoke "deploy:compile"
    invoke "deploy:make_install"
    invoke "deploy:configuration"
    invoke "deploy:start_glusterfs"
  end

end
